// This file is auto-generated by machinist. Please don't modified it manually.
using namespace Dal;
namespace Interp1Linear_v1
{
    struct Reader_ : Archive::Reader_
    {
		String_ name_;
		Vector_<double> x_;
		Vector_<double> f_;
        Reader_(const Archive::View_& src, Archive::Built_& share)
        {
            using namespace Archive::Utils;
            NOTE("Reading Interp1Linear_v1 from store");
            assert(src.Type() == "Interp1Linear_v1");
       GetOptional(src, "name", &name_, std::mem_fn(&Archive::View_::AsString));
       Get(src, "x", &x_, std::mem_fn(&Archive::View_::AsDoubleVector));
       Get(src, "f", &f_, std::mem_fn(&Archive::View_::AsDoubleVector));
        }
        Interp1Linear_* Build() const
      {
         return new Interp1Linear_(name_, x_, f_);
      }
        Interp1Linear_* Build(const Archive::View_& src, Archive::Built_& share) const
        {
            return Reader_(src, share).Build();
        }

        // constructor-through-registry (safer than default constructor)
        Reader_(void (*register_func)(const String_&, const Archive::Reader_*))
        {
            register_func("Interp1Linear_v1", this);
        }
    };
    static Reader_ TheData(Archive::Register);
}
	